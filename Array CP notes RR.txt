Arrays Notess


Array
   1. Maximum Difference betweeen two elements such that the larger element appears after it ->
   
                    A. Complex Method
   --> cheap trick -- pre compute difference Array
                   -- maximum sum sub array in difference array  is the maximum difference 
				   -- maximum sum sub array (Kadane algorithm problem)
				   -- order of n solution
				   
				   B. Easy Method
				   -- minimum so far in the left side minus current element (order of n solution)\
				   
	2. Finding the only number that occurs odd number of times in the array -->> XOR all elements and the result of XOR is answer
	-->> cheap trick -> any number XORed with itself is zero and XOR is commutative
	
	3.Find duplicates in O(n) time and O(1) extra space (But all values are less than n)
	   trick : if extra space was not constant , we would have used HashMap right away
	--> as all values are less than n , use the input array as the hashMap, by Negating its element for first visit, and when u visit second 
	    time to negate the value and see that its already negative , u know that the number is repeated
		--> to handle the 0 case , increase all elements by 1 and show result by decresing 1 from each element
		

	4. Find a pair of Number whose sum is equal to X
    -->> always sort and use two pointer method
        -->> two pointers will be left and right  and loop always==> while(left<right)

    5. sum of 3 elements equal to X
    -->> extended double pointer method --> sort array
                                        -->fix first number and subtract it from required sum
                                        --> now play double pointer method to find pair equal to remaining sum , hence u got your triplet